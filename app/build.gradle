import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// 定义一个打包时间
def static releaseTime() {
    Date currentTime = new Date()
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd_HHmm")
    String dateString = formatter.format(currentTime)
    return dateString
}

android {
    signingConfigs {
        replese {
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('./caipiao.jks')
            storePassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
//    greendao {
//        // 指定数据库schema版本号，迁移等操作会用到
//        schemaVersion 38
//        // 设置生成数据库文件的目录，默认是在build中，可以将生成的文件放到我们的java目录中
//        targetGenDir 'src/main/java'
//        // 设置生成的数据库相关文件的包名，默认为entity所在的包名
//        daoPackage 'com.zrx.chedai.common.greendao.gen'
//    }
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    useLibrary 'org.apache.http.legacy'
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.cp.new"
        buildToolsVersion rootProject.ext.android["buildToolsVersion"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
//        signingConfig signingConfigs.replese

//        ndk {
//            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
//            abiFilters "armeabi",  "x86"
//          abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', "x86"
//        }

    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true
            signingConfig signingConfigs.replese
//            shrinkResources true
//            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    //修改生成的apk名字
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name.equals("debug")) {
                outputFileName = "debug.apk"
            } else {
                outputFileName = "caipiao_${getVersionName()}-unFirm_${releaseTime()}_${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //implementation 'me.jessyan:arms:2.5.2'
    //implementation 'me.jessyan:arms-imageloader-glide:2.5.2'
    //切换时必须三个同时加入
    implementation project(path: ':arms')
    implementation project(path: ':arms-imageloader-glide')
    implementation project(path: ':arms-autolayout')

    //view
    implementation rootProject.ext.dependencies["autosize"]
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    //tools
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //注意 Arms 核心库现在并不会依赖某个 EventBus, 要想使用 EventBus, 还请在项目中自行依赖对应的 EventBus
    //现在支持两种 EventBus, greenrobot 的 EventBus 和畅销书 《Android源码设计模式解析与实战》的作者 何红辉 所作的 AndroidEventBus
    //依赖后 Arms 会自动检测您依赖的 EventBus 并自动注册
    //建议使用 AndroidEventBus, 特别是组件化项目, 原因请看 https://github.com/hehonghui/AndroidEventBus/issues/49
    //这种做法可以让使用者有自行选择三方库的权利, 并且还可以减轻 Arms 的体积
    implementation rootProject.ext.dependencies["androideventbus"]
    //    implementation rootProject.ext.dependencies["eventbus"]
    //test
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["junit"]


    //-------自定义-------

    //design
    implementation rootProject.ext.dependencies["design"]
    //constraint
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    //blankj工具
//    implementation 'com.blankj:utilcode:1.11.1'
    //BaseRecyclerViewAdapterHelper
//    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.47'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

}
